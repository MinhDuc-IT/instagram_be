generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  userName       String
  email          String    @unique
  password       String
  fullName       String?
  gender         Int?
  phone          String?
  role           String    @default("USER")
  authId         String?
  trialExpiresAt DateTime?
  isVerified     Boolean   @default(false)
  lastLogin      DateTime?

  /// üîç Audit fields
  createdAt  DateTime  @default(now())
  createdBy  String?
  modifiedAt DateTime?
  modifiedBy String?
  deleted    Boolean   @default(false)
  deletedAt  DateTime?
  deletedBy  String?

  UserDevice       UserDevice[]
  UserToken        UserToken[]
  UserVerification UserVerification[]
  Posts            Post[]
}

model UserDevice {
  id           Int         @id @default(autoincrement())
  userId       Int
  deviceName   String
  userAgent    String
  deviceType   String
  ipAddress    String
  location     String?
  refreshToken String
  lastActive   DateTime    @default(now())
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens       UserToken[]

  @@index([userId])
  @@map("user_devices")
}

model UserToken {
  id                 Int        @id @default(autoincrement())
  userId             Int
  deviceId           Int
  refreshToken       String
  refreshTokenFamily String
  expiresAt          DateTime
  invalidated        Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  device             UserDevice @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, deviceId])
  @@index([refreshTokenFamily])
  @@map("user_tokens")
}

model UserVerification {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_verifications")
}

model BackgroundJob {
  id         String  @id @default(cuid())
  type       String  @db.VarChar(50) // 'image' | 'video'
  fileName   String  @db.VarChar(255)
  status     String  @db.VarChar(50) // 'pending' | 'processing' | 'completed' | 'failed'
  result     Json? // Stored as JSON
  error      String? @db.Text
  progress   Int     @default(0)
  retryCount Int     @default(0)
  maxRetries Int     @default(3)
  publicId   String? @db.VarChar(255)
  url        String? @db.Text
  secureUrl  String? @db.Text
  fileSize   Int?
  format     String? @db.VarChar(50)

  // Audit fields
  createdDate  DateTime  @default(now())
  createdBy    String?   @db.VarChar(255)
  modifiedDate DateTime  @updatedAt
  modifiedBy   String?   @db.VarChar(255)
  deleted      Boolean   @default(false)
  deletedDate  DateTime?
  deletedBy    String?   @db.VarChar(255)
  completedAt  DateTime?

  @@index([status])
  @@index([createdDate])
  @@index([type])
  @@index([deleted])
}

model UploadedAsset {
  id        String @id @default(cuid())
  publicId  String @unique @db.VarChar(255)
  type      String @db.VarChar(50) // 'image' | 'video'
  fileName  String @db.VarChar(255)
  url       String @db.Text
  secureUrl String @db.Text
  format    String @db.VarChar(50)
  width     Int?
  height    Int?
  duration  Float?
  fileSize  Int
  folder    String @db.VarChar(255)
  tags      String @db.Text // JSON array stored as text

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Audit fields
  createdDate  DateTime  @default(now())
  createdBy    String?   @db.VarChar(255)
  modifiedDate DateTime  @updatedAt
  modifiedBy   String?   @db.VarChar(255)
  deleted      Boolean   @default(false)
  deletedDate  DateTime?
  deletedBy    String?   @db.VarChar(255)

  @@index([publicId])
  @@index([createdDate])
  @@index([type])
  @@index([deleted])
}

model Post {
  id                 String  @id @default(cuid())
  userId             Int
  caption            String?
  location           String?
  visibility         String  @default("public") // 'public' | 'private' | 'friends'
  isLikesHidden      Boolean @default(false)
  isCommentsDisabled Boolean @default(false)

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  media UploadedAsset[]

  // Audit fields
  createdDate  DateTime  @default(now())
  createdBy    String?   @db.VarChar(255)
  modifiedDate DateTime  @updatedAt
  modifiedBy   String?   @db.VarChar(255)
  deleted      Boolean   @default(false)
  deletedDate  DateTime?
  deletedBy    String?   @db.VarChar(255)

  @@index([userId])
  @@index([createdDate])
  @@index([deleted])
}
