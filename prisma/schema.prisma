generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  userName         String
  email            String             @unique
  password         String
  gender           Int?
  phone            String?
  role             String             @default("USER")
  authId           String?
  trialExpiresAt   DateTime?
  isVerified       Boolean            @default(false)
  lastLogin        DateTime?

  /// üîç Audit fields
  createdAt       DateTime          @default(now())
  createdBy       String?
  modifiedAt      DateTime?
  modifiedBy      String?
  deleted         Boolean           @default(false)
  deletedAt       DateTime?
  deletedBy       String?

  UserDevice       UserDevice[]
  UserToken        UserToken[]
  UserVerification UserVerification[]
}

model UserDevice {
  id           Int         @id @default(autoincrement())
  userId       Int
  deviceName   String
  userAgent    String
  deviceType   String
  ipAddress    String
  location     String?
  refreshToken String
  lastActive   DateTime    @default(now())
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens       UserToken[]

  @@index([userId])
  @@map("user_devices")
}

model UserToken {
  id                 Int        @id @default(autoincrement())
  userId             Int
  deviceId           Int
  refreshToken       String
  refreshTokenFamily String
  expiresAt          DateTime
  invalidated        Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  device             UserDevice @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, deviceId])
  @@index([refreshTokenFamily])
  @@map("user_tokens")
}

model UserVerification {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_verifications")
}
